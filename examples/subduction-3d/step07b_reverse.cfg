[pylithapp.metadata]
# Materials
#   All four blocks use the linear, isotropic elastic material model
#   (mat_elastic.cfg).
#
# Boundary Conditions
#   Roller boundary conditions (pylithapp.cfg).
#
# Fault
#   Slip impulses for reverse slip on the suduction interface (slab top).
#
# Output
#   We output the displacements for the slip impulses on the ground
#   surface at at the fake cGNSS locations defined by cgnss_stations.txt.
base = [pylithapp.cfg, mat_elastic.cfg]
description = "Generate static Green's functions for reverse slip on the subduction interface."
arguments = [step07b_reverse.cfg, mat_elastic.cfg]
version = 2.0.0
pylith_version = [>3.0]

features = [
    "Green's functions",
    pylith.problems.GreensFns,
    pylith.meshio.OutputSolnPoints,
    pylith.faults.FaultCohesiveImpulses,
    spatialdata.spatialdb.UniformDB,
    spatialdata.geocoords.CSGeo,
    ]

# ----------------------------------------------------------------------
# Output of parameters used and simulation progress.
# ----------------------------------------------------------------------
[pylithapp]
dump_parameters.filename = output/step07b_reverse-parameters.json
problem.progress_monitor.filename = output/step07b_reverse-progress.txt

# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
problem.defaults.name = step07b_reverse

# ----------------------------------------------------------------------
# journal
# ----------------------------------------------------------------------
# Turn on journal information for Green's function problem.
[pylithapp.journal.info]
greensfns = 1

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp]
# Change the problem type to GreensFns.
problem = pylith.problems.GreensFns

[pylithapp.greensfns]
solution = pylith.problems.SolnDispLagrange

# Specify the fault on which to impose slip impulses.
# The `label` orresponds to the name of the nodeset in the Cubit journal file
label = fault_slabtop_patch

# Set the default quadrature order for all subfields.
#
# IMPORTANT: The quadrature order *must* the same for all solution and
# auxiliary subfields. PyLith will verify that this requirement is met.
# This requirement may be relaxed in the future.
defaults.quadrature_order = 1

# We add output at our fake GNSS stations that we will use to invert for the slip.
solution_observers = [domain, groundsurf, cgnss_stations]
solution_observers.cgnss_stations = pylith.meshio.OutputSolnPoints

[pylithapp.problem.solution_observers.cgnss_stations]
# The label is combined with the simulation name to provide a default name for output files.
label = cgnss_stations
reader.filename = cgnss_stations.txt

# Specify coordinate system used in GNSS station file.
reader.coordsys = spatialdata.geocoords.CSGeo
reader.coordsys.space_dim = 3
reader.coordsys.crs_string = EPSG:4326

# ----------------------------------------------------------------------
# fault
# ----------------------------------------------------------------------
[pylithapp.problem]
interfaces = [fault_slabtop]
# To create slip impulses for Green's functions we use a special fault type.
interfaces.fault_slabtop = pylith.faults.FaultCohesiveImpulses

[pylithapp.problem.interfaces.fault_slabtop]
# Define 'label' as defined in the nodesets from Cubit.
label = fault_slabtop_patch
# Must also specify nodeset defining the buried edge of the fault.
edge = fault_slabtop_patch_edge

# Output `slip` on the fault.
observers.observer.data_fields = [slip]

# Limit Green's functions to reverse slip (dof=2)
impulse_dof = [2]

# We use a UniformDB to specify the region of the fault where we want
# slip impulses for Green's functions.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Impulse amplitude
db_auxiliary_field.values = [slip_left_lateral, slip_reverse, slip_opening]
db_auxiliary_field.data = [1.0*m, 1.0*m, 0.0*m]

# Currently, only basis order = 1 results in appropriate output for inversion.
auxiliary_subfields.slip.basis_order = 1


# End of file
